任务一：
用户管理页面的，输入框失去焦点的时候，判断用户名已经存在

任务二： 
在login和header两个组件中都使用了 ， 访问项目ip的查询 代码 ，是否可以优化

任务三： 
如果同一个浏览器开两个窗口访问项目，验证码的问题


https://blog.csdn.net/m0_37727560/article/details/79391764  这个很关键

https://segmentfault.com/a/1190000012238576?utm_source=tag-newest  // three.js入门

http://www.yanhuangxueyuan.com/doc/three.js/clippingplanes.html // 郭龙邦的技术博客




import Vue from 'vue'
import Vue form 'vue'的意思
import Vue form 'vue’的意思
import Vue form ‘vue’ 写全的话是import Vue from ‘…/nodemouls/vue/list/vue.js’； 此时在webpack.base.conf.js中进行了定义，内置了一些选项，extenions:[’.js’,’.vue’,’.json’],意思是省略后面的后缀，由webpack来自动为我们加上。
如果名字比较长，还可以起个别名。
alias:{ ‘@’:resolve(‘src’)},
它的意思是在vue项目中，引入路径的时候使用@即代表src文件夹，省去了…/…/…/的操作，这样写比较十分方便。
当我们在模板中写img的时候有时也需要翻着找，那么能用@代替吗？答案是当然可以的，
比如在assets文件夹中有张图片，logo.png。以往写可能是：
 <img src="../../src/assets/logo.png">
现在知道怎么回事以后可以直接这样写：

 <img src="@/assets/logo.png"
试验发现这是能成功的，但是lssue提出的方案是在@前面加上~。两者均能成功



校园网密码 	220180991	wk5917731

其他人的博客
https://www.cnblogs.com/suRimn/p/10564409.html

根级相应问题
https://blog.csdn.net/sinianliushui/article/details/81774327

高达一号
https://blog.csdn.net/u010003835/article/details/98660040

// element-ui 中使用echarts
https://blog.csdn.net/izengjing/article/details/83539426

https://blog.csdn.net/mineblogjw/article/details/85260223

前者的博客
https://blog.csdn.net/dkr380205984/article/details/82855841

数组的拓展运算符
https://segmentfault.com/q/1010000012469852


修改数据库时区
https://developer.aliyun.com/ask/136097?spm=a2c6h.13159736

MYSQL数据库学习
https://www.cnblogs.com/fangxijun/p/7702727.html

高手的博客
https://blog.csdn.net/yyx3214/article/month/2019/10


stylus中文学习官方网站
https://stylus.comptechs.cn

一叶飘舟
https://blog.csdn.net/jdsjlzx

desaco的博客
https://blog.csdn.net/shareus

bigdecimal除法问题
https://www.cnblogs.com/LeoBoy/p/5897754.html




比较好的三维页面
http://newrent.house365.com/vr/?city=nj&house_id=265838945&house_type=sell&m=zq_gkrjddyszjn_77&from=singlemessage

智慧桥梁网址
http://intellibridge.cn:8080/		

传透云
https://blog.csdn.net/zouxin_88/article/details/90439803

架构文摘
https://blog.csdn.net/uxiAD7442KMy1X86DtM3/article/details/100977415

咸鱼最牛逼
https://blog.csdn.net/panchang199266/article/details/90145677

蚂蚁部落
http://www.softwhy.com/qiduan

比较学习sass和stylus的常用功能
https://segmentfault.com/a/1190000008013566



移动端遇到的问题
https://www.cnblogs.com/ljx20180807/p/9729941.html

门心叼龙
https://blog.csdn.net/geduo_83/article/details/90760275

pdf页面展示
https://www.cnblogs.com/sixthrhapsody/p/10194491.html
https://www.cnblogs.com/kanglinen/p/10779185.html

志波同学的博客
https://blog.csdn.net/claram

js的深度拷贝
https://blog.csdn.net/document_dom/article/details/88537629
js的promise学习
https://www.jianshu.com/p/2c4d9dfa99bb

源码解读
https://www.cnblogs.com/ysocean/p/8419559.html

去除浏览器的滚动条
https://blog.csdn.net/zhouzuoluo/article/details/84799714



猿人谷
https://www.cnblogs.com/heyonggang/p/8638374.html

webstorage存储
https://www.cnblogs.com/cencenyue/p/7604651.html


nginx映射
https://www.cnblogs.com/falcon-fei/p/11060201.html


后台运行jar包项目
https://blog.csdn.net/chen_2890/article/details/90520517

高手的博客
https://www.cnblogs.com/knowledgesea/p/5199046.html

沧海一滴
https://www.cnblogs.com/softidea/p/5759180.html

java技术栈
https://blog.csdn.net/youanyyou/article/details/85774066

郑旭的cnblog
https://www.cnblogs.com/zhengxu/articles/9167169.html

redis相关
http://www.itcast.cn/news/20181213/14240884004.shtml
https://www.cnblogs.com/niuben/p/10812369.html

传臣
https://blog.csdn.net/vae1314chuanchen/article/details/81838476

网页logo图片
https://www.cnblogs.com/chinabin1993/p/8509743.html

canvas相关技术学习
http://www.fly63.com/article/detial/3091

pdf.js 相关采坑日记
https://www.jianshu.com/p/9b1fe8cb9795

何许人  js跟踪源码
https://www.cnblogs.com/KingJames/p/11763590.html

大神的three.js
https://blog.csdn.net/ithanmang/article/details/80901893

冰河  77 大神
https://blog.csdn.net/l1028386804/article/details/78352401

js压缩  xml很底层的东西
https://www.jianshu.com/p/e95718103e0a

indexDB封装
https://www.jianshu.com/p/14cc0c79d0ef

三维模型渲染
https://cloud.tencent.com/developer/article/1187931

Three.js应当知道的十件事
https://www.cnblogs.com/Leo_wl/archive/2013/01/24/2874528.html

ObjLoader加载及渲染分析
https://www.jianshu.com/p/f8747b905393

 // 加载obj成功的回调函数
                // objLoader._reportProgress({detail: { text: 'Loading: ' + modelName }})

                
object.position.y = 0
                  object.rotation.y = 0 // 绕着y轴旋转 弧度制
                  object.scale.set(modelScaleFactor, modelScaleFactor, modelScaleFactor) // 缩放比率
                  // 每个储位单独赋予一个基础材质, 每个object就代表一个group
                  object.children.forEach((child) => {
                    let name = child.name
                    if (name.split(' ')[1] === '地面') {
                      let normalGeometry = new THREE.Geometry().fromBufferGeometry(child.geometry)
                      let minX = 0
                      let minZ = 0
                      let maxX = 0
                      let maxZ = 0
                      normalGeometry.vertices.forEach((vertice) => {
                        if (vertice.x < minX) {
                          minX = vertice.x
                        }
                        if (vertice.x > maxX) {
                          maxX = vertice.x
                        }
                        if (vertice.z < minX) {
                          minZ = vertice.z
                        }
                        if (vertice.z > maxX) {
                          maxZ = vertice.z
                        }
                      })
                      that.threeDParam.modelCenter = {x: ((minX + maxX) / 2), z: ((minZ + maxZ) / 2)}
                      that.threeDParam.camera.lookAt(that.threeDParam.modelCenter.x, 0, that.threeDParam.modelCenter.z)
                    }
                    if (child instanceof THREE.Mesh) { // 判断对象是否是mesh
                      // 遍历obj数据
                      Object.values(material).forEach((mtl) => {
                        // 这里需要判断mtl属性是否是单一mesh，有可能是组合mesh
                        if (child.material instanceof THREE.Material) { // 单一mesh
                          if (child.material.uuid === mtl.uuid) {
                            // 剪切示例动画
                            if (child.name === 'Mesh1 II-1/公寓-1') {
                              child.material = new THREE.MeshPhongMaterial({
                                color: mtl.color,
                                side: THREE.DoubleSide,
                                // 对象引用的好处
                                clippingPlanes: [localPlane], // 这里不是数据响应式的
                                shininess: 0
                              })
                              child.add(that.threeDParam.labelGroup[0])
                            } else {
                              child.material = new THREE.MeshPhongMaterial({
                                color: mtl.color,
                                side: THREE.DoubleSide,
                                shininess: 0
                              })
                            }
                          }
                        } else { // 组合mesh, 基本不用
                          child.material.forEach((mesh) => {
                            if (mesh.uuid === mtl.uuid) {
                              // THREE.DoubleSide 意思是指三维页面任何一个group的两面都显示
                              mesh.material = new THREE.MeshPhongMaterial({color: mtl.color, side: THREE.DoubleSide})
                            }
                          })
                        }
                      })
                    }
                  })
                  scene.children.unshift(object)
                  that.threeDParam.group = object

                  meshArr = object.children
                  /* 下面与三维模型无关，主要给table加载用 */
                  const categoryArr = [] // 创建一个类数组, 主要用于存储构件
                  const recordNameArr = [] // 创建一个名字记录数组
                  meshArr.forEach((mesh) => {
                    let name = mesh.name
                    let markName = name.substring(0, name.indexOf(' '))
                    let strArr = name.split('/')
                    let showName // 显示名字
                    let categoryName // 种类名称
                    if (strArr.length === 1) {
                      showName = strArr[0].split(' ')[1]
                      categoryName = strArr[0].split(' ')[1]
                    } else {
                      showName = strArr[1]
                      categoryName = strArr[0].substr(strArr[0].indexOf(' ') + 1, strArr[0].length)
                    }
                    // showName: 显示名称  mesh: 网格  markName: 标识名字 meshName
                    let child = {id: mesh.id, showName: showName, mesh: mesh, markName: markName}
                    let category = {id: that.guid(), showName: categoryName, children: []} // 这个children要设置成单独的元素名，非常棒
                    if (categoryArr.length === 0) {
                      category.children.push(child)
                      categoryArr.push(category)
                      recordNameArr.push(categoryName)
                    } else {
                      let a = 0 // 记录变量
                      categoryArr.forEach((value) => {
                        if (categoryName === value.showName) { // 数组循环时 不能改变其内部结构
                          value.children.push(child)
                          a++
                        }
                      })
                      if (a === 0) {
                        category.children.push(child)
                        categoryArr.push(category)
                        recordNameArr.push(categoryName)
                      }
                    }
                  })
                  // 为什么这个最后
                  that.group.component = categoryArr